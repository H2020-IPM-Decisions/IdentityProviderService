openapi: 3.0.1
info:
  title: H2020 IPM Decisions - Identity Provider API
  description: Identity Provider for the H2020 IPM Decisions project
  contact:
    name: ADAS Modelling and Informatics Team
    url: 'https://www.adas.uk/'
    email: software@adas.co.uk
  license:
    name: Use under GNU General Public License v3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.txt'
  version: v1
paths:
  /api/accounts/register:
    post:
      tags:
        - Accounts
      operationId: RegisterUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForRegistrationDto'
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/accounts/authenticate:
    post:
      tags:
        - Accounts
      operationId: AuthenticateUser
      parameters:
        - name: client_id
          in: header
          description: Client ID
          required: true
          style: simple
        - name: client_secret
          in: header
          description: Client Secret
          allowEmptyValue: true
          style: simple
        - name: grant_type
          in: header
          description: Grant Type
          required: true
          style: simple
        - name: refresh_token
          in: header
          description: Refresh Token
          allowEmptyValue: true
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForAuthenticationDto'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/accounts/authenticate/token:
    post:
      tags:
        - Accounts
      operationId: AuthenticateUserWithToken
      parameters:
        - name: client_id
          in: header
          description: Client ID
          required: true
          style: simple
        - name: client_secret
          in: header
          description: Client Secret
          allowEmptyValue: true
          style: simple
        - name: grant_type
          in: header
          description: Grant Type
          required: true
          style: simple
        - name: refresh_token
          in: header
          description: Refresh Token
          allowEmptyValue: true
          style: simple
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/accounts:
    options:
      tags:
        - Accounts
      responses:
        '200':
          description: Success
  /api/applicationclients:
    get:
      tags:
        - ApplicationClients
      operationId: GetApplicationClients
      parameters:
        - name: isEnabled
          in: query
          schema:
            type: boolean
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: searchQuery
          in: query
          schema:
            type: string
        - name: pageNumber
          in: query
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    head:
      tags:
        - ApplicationClients
      parameters:
        - name: isEnabled
          in: query
          schema:
            type: boolean
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: searchQuery
          in: query
          schema:
            type: string
        - name: pageNumber
          in: query
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    post:
      tags:
        - ApplicationClients
      parameters:
        - name: accept
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationClientForCreationDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationClientDto'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ApplicationClientDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
    options:
      tags:
        - ApplicationClients
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
  '/api/applicationclients/{id}':
    delete:
      tags:
        - ApplicationClients
      operationId: DeleteApplicationClient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
    patch:
      tags:
        - ApplicationClients
      operationId: PartialUpdateApplicationClient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
      responses:
        '201':
          description: Success
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
    get:
      tags:
        - ApplicationClients
      operationId: GetApplicationClient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
  /api/refreshtokens:
    get:
      tags:
        - RefreshTokens
      operationId: GetRefreshTokens
      parameters:
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: pageNumber
          in: query
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    head:
      tags:
        - RefreshTokens
      parameters:
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: pageNumber
          in: query
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
  '/api/refreshtokens/{id}':
    get:
      tags:
        - RefreshTokens
      operationId: GetRefreshToken
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    delete:
      tags:
        - RefreshTokens
      operationId: DeleteRefreshToken
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
  /api/roles:
    get:
      tags:
        - Roles
      operationId: GetRoles
      parameters:
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
    head:
      tags:
        - Roles
      parameters:
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
    post:
      tags:
        - Roles
      operationId: CreateRole
      parameters:
        - name: accept
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleForManipulationDto'
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
    options:
      tags:
        - Roles
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
  '/api/roles/{id}':
    get:
      tags:
        - Roles
      operationId: GetRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
    delete:
      tags:
        - Roles
      operationId: DeleteRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
  /api:
    get:
      tags:
        - Root
      operationId: GetRoot
      responses:
        '200':
          description: Success
  '/api/users/{userId}/claims':
    post:
      tags:
        - UserClaims
      operationId: AssignClaimsToUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimForManipulationDto'
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    delete:
      tags:
        - UserClaims
      operationId: RemoveClaimsFromUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimForManipulationDto'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimForManipulationDto'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimForManipulationDto'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimForManipulationDto'
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    get:
      tags:
        - UserClaims
      operationId: GetClaimsFromUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    options:
      tags:
        - UserClaims
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
  '/api/users/{userId}/roles':
    post:
      tags:
        - UserRoles
      operationId: AssignRolesToUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleForManipulationDto'
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    delete:
      tags:
        - UserRoles
      operationId: RemoveRolesFromUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleForManipulationDto'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleForManipulationDto'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleForManipulationDto'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleForManipulationDto'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    get:
      tags:
        - UserRoles
      operationId: GetRolesFromUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    options:
      tags:
        - UserRoles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
  /api/users:
    get:
      tags:
        - Users
      operationId: GetUsers
      parameters:
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: searchQuery
          in: query
          schema:
            type: string
        - name: pageNumber
          in: query
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    head:
      tags:
        - Users
      parameters:
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: searchQuery
          in: query
          schema:
            type: string
        - name: pageNumber
          in: query
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    options:
      tags:
        - Users
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer: []
  '/api/users/{id}':
    get:
      tags:
        - Users
      operationId: GetUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fields
          in: query
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
    delete:
      tags:
        - Users
      operationId: DeleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/vnd.h2020ipmdecisions.hateoas+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      security:
        - bearer: []
components:
  schemas:
    UserForRegistrationDto:
      required:
        - email
        - password
        - username
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        password:
          type: string
          format: password
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
        extensions:
          type: object
          additionalProperties:
            type: object
            additionalProperties: false
          nullable: true
          readOnly: true
      additionalProperties: false
    UserForAuthenticationDto:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      additionalProperties: false
    ApplicationClientType:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ApplicationClientForCreationDto:
      required:
        - applicationClientType
        - enabled
        - name
        - refreshTokenLifeTime
        - url
      type: object
      properties:
        name:
          type: string
        applicationClientType:
          allOf:
            - $ref: '#/components/schemas/ApplicationClientType'
        enabled:
          type: boolean
        refreshTokenLifeTime:
          type: integer
          format: int32
        url:
          type: string
      additionalProperties: false
    ApplicationClientDto:
      required:
        - applicationClientType
        - enabled
        - name
        - refreshTokenLifeTime
        - url
      type: object
      properties:
        id:
          type: string
          format: uuid
        base64Secret:
          type: string
          nullable: true
        name:
          type: string
        applicationClientType:
          allOf:
            - $ref: '#/components/schemas/ApplicationClientType'
        enabled:
          type: boolean
        refreshTokenLifeTime:
          type: integer
          format: int32
        url:
          type: string
      additionalProperties: false
    Operation:
      type: object
      properties:
        value:
          type: object
          additionalProperties: false
          nullable: true
        path:
          type: string
          nullable: true
        op:
          type: string
          nullable: true
        from:
          type: string
          nullable: true
      additionalProperties: false
    RoleForManipulationDto:
      required:
        - name
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    ClaimForManipulationDto:
      type: object
      properties:
        type:
          maxLength: 50
          type: string
          nullable: true
        value:
          maxLength: 50
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    bearer:
      type: apiKey
      description: "JWT Authorization header using the Bearer scheme. \r\n                      Enter 'Bearer' [space] and then your token in the text input below.\r\n                      Example: 'Bearer 12345abcdef'"
      name: Authorization
      in: header